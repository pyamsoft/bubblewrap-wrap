#!/bin/sh
#
# The GPLv2 License
#
#   Copyright (C) 2020  Peter Kenji Yamanaka
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License along
#   with this program; if not, write to the Free Software Foundation, Inc.,
#   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# bubblewrap-wrap

readonly APP_NAME="bww"
readonly VERSION="0.0.10"
readonly BWRAP="bwrap"

# Support XDG directories
readonly XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-${HOME}/.config}"
readonly XDG_CACHE_HOME="${XDG_CACHE_HOME:-${HOME}/.cache}"
readonly XDG_DATA_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}"
readonly XDG_RUNTIME_DIR="${XDG_RUNTIME_DIR:-/run/user/$(id -u)}"

print_version() {
  printf -- '%s [%s]\n' "${APP_NAME}" "${VERSION}"
  return 0
}

##
# Split a long option with embedded equals (=) and return the argument
# $1 option name
# $2 argument
split_equal_get_arg() {
  full_arg="$1"
  printf -- '%s' "${full_arg}" | tr '=' ' ' | awk '{ print $2 }'
  unset full_arg
}

##
# Block a target from being accessed in the jail
#
# If the target is a directory, it will be mounted with --tmpfs
# $1 target
block_in_jail() {
  target="$1"

  if [ -z "${target}" ]; then
    printf -- 'WARN: Unable to --tmpfs block, no argument\n'
    return 1
  fi

  if [ ! -e "${target}" ]; then
    printf -- 'WARN: Unable to --tmpfs block target: %s, does not exist.\n' "${target}"
    return 1
  fi

  if [ -d "${target}" ]; then
    printf -- '--tmpfs blocking target dir %s via tmpfs\n' "${target}"
    __bw_opts="${__bw_opts}
  --tmpfs ${target}"
  else
    printf -- 'WARN: Unable to --tmpfs block non-directory target: %s\n' "${target}"
  fi
}

##
# Bind if exists
# $1 - command, either --bind --ro-bind --dev-bind
# $2 - path
__bind_if_exists() {
  bind_command="$1"
  bind_path="$2"

  is_symlink=0
  real_path=""

  if [ -e "${bind_path}" ]; then
    # If its a symlink, bind the real file too
    if [ -L "${bind_path}" ]; then
      # We need to check if we can also carry over the original file
      is_symlink=1
      real_path="$(realpath "${bind_path}")"
      if [ -e "${real_path}" ]; then
        printf -- '%s in jail %s\n' "${bind_command}" "${real_path}"
        __bw_opts="${__bw_opts}
  ${bind_command} ${real_path} ${real_path}"
      else
        printf -- 'WARN: Unable to %s symlink %s, real path %s does not exist\n' "${bind_command}" \
          "${bind_path}" "${real_path}"
      fi
    fi

    if [ "${is_symlink}" -eq 1 ]; then
      if [ -w "${bind_path}" ]; then
        printf -- '%s in jail %s\n' "${bind_command}" "${bind_path}"
        __bw_opts="${__bw_opts}
  ${bind_command} ${bind_path} ${bind_path}"
      else
        printf -- 'WARN: Unable to %s symlink at %s, lacking permission\n' "${bind_command}" \
          "${bind_path}"
      fi
    else
      printf -- '%s in jail %s\n' "${bind_command}" "${bind_path}"
      __bw_opts="${__bw_opts}
  ${bind_command} ${bind_path} ${bind_path}"
    fi
  else
    printf -- 'WARN: Unable to %s %s, path does not exist\n' "${bind_command}" "${bind_path}"
  fi

  unset bind_path
  unset bind_command
  unset is_symlink
  unset real_path
}

##
# Bind if exists
# $@ - paths
bind_if_exists() {
  for path in "$@"; do
    __bind_if_exists "--bind" "${path}"
  done
}

##
# RO-Bind if exists
# $@ - paths
robind_if_exists() {
  for path in "$@"; do
    __bind_if_exists "--ro-bind" "${path}"
  done
}

##
# DEV-Bind if exists
# $@ -- paths
devbind_if_exists() {
  for path in "$@"; do
    __bind_if_exists "--dev-bind" "${path}"
  done
}

##
# Make jail directory
# $1 - jail dir
# $2 - command
make_jail() {
  # Make the jail directory
  mkdir -p "$1" || {
    printf -- 'Unable to prepare jail root directory for: %s\n' "$2"
    return 1
  }

  # Make jail home
  mkdir -p "$1/home" || {
    printf -- 'Unable to prepare jail home directory for: %s\n' "$2"
    return 1
  }

  # Make jail var/tmp
  mkdir -p "$1/var/tmp" || {
    printf -- 'Unable to prepare jail var/tmp directory for: %s\n' "$2"
    return 1
  }

  return 0
}

##
# Checks to see if we should apply an option
# $1 the option to ignore
has_option() {
  for option in ${__ignore_opts}; do
    # Option is in ignore list, do not apply
    if [ "${option}" = "$1" ]; then
      return 1
    fi
  done

  # Option was not found in ignore list, apply
  return 0
}

##
# Print usage
# $1 Display all help
usage() {
  usage__all="$1"

  print_version || return 1
  printf -- '%s\n\n' "$(
    cat <<EOF
usage: ${APP_NAME} [options] <program> [program-arguments]

  [HELP]
  --help                      Display this help
  --help-all                  Display this help, and ${BWRAP} --help

  [JAIL]
  --forcename <name>          Force the jail to be named using the given name instead of adopting the program's name
  --destroy <name>            Destroy a jail by removing its jail home directory and script file if they exist

  [MOUNT]
  --bind-if-exists <path>     Bind a path outside of jail to the same path in jail if the directory exists
  --robind-if-exists <path>   Read only bind a path outside of jail to the same path in jail if the directory exists
  --devbind-if-exists <path>  Dev bind a path outside of jail to the same path in jail if the directory exists

  [SESSION]
  --nodie                     Do not die with parent, useful for programs that fork
  --nosession                 Do not create a new session (for CLI applications)

  [NAMESPACE]
  --nouser                    Do not perform user namespace sandboxing
  --noipc                     Do not perform ipc namespace sandboxing
  --nopid                     Do not perform pid namespace sandboxing
  --nouts                     Do not perform uts namespace sandboxing
  --nocgroup                  Do not perform cgroup namespace sandboxing

  [SECURITY]
  --nodev                     Do not sandbox /dev, use real /dev
  --notmp                     Do not sandbox /tmp, use real /tmp
  --nodrop                    Do not drop capabilities after launch

  [FEATURE]
  --noaudio                   Do not allow pulseaudio/pipewire in jail
  --nox11                     Do not bind X11 socket
  --nodbus                    Do not bind dbus daemon socket
  --nogl                      Do not allow 3D graphics in jail
  --nothemes                  Do not adopt existing desktop themes for GTK and QT

  [ALLOW]
  --v4l                       Allow access to v4l devices
  --systemd                   Allow access to systemd from jail
  --dconf                     Allow access to dconf from jail
  --keyring                   Allow access to gnome-keyring from jail
  --gpg                       Allow access to gnupg from jail
  --p11                       Allow access to polkit from jail
  --gvfs                      Allow access to GVFS from jail

  [DEBUG]
  --private                   Create a temporary jail which mounts its \$HOME onto a tmpfs
  --shell                     Launch bash inside of the jail instead of running the program itself

EOF
  )" || return 1

  # Extended help
  if [ -n "${usage__all}" ] && [ "${usage__all}" -ne 0 ]; then
    "${BWRAP}" --help || return 1
  fi

  return 0
}

##
# rm (-r) a target
# $1 target
# $2 recursive
rm_me() {
  rm_me__target="$1"
  rm_me__r="$2"

  if [ -n "${rm_me__target}" ] && [ -e "${rm_me__target}" ]; then
    if [ -n "${rm_me__r}" ] && [ "${rm_me__r}" -ne 0 ]; then
      rm -r -f -v "${rm_me__target}" || {
        printf -- 'Failed to remove %s\n' "${rm_me__target}"

        unset rm_me__r
        unset rm_me__target
        return 1
      }
    else
      rm -f -v "${rm_me__target}" || {
        printf -- 'Failed to remove %s\n' "${rm_me__target}"

        unset rm_me__r
        unset rm_me__target
        return 1
      }
    fi
  fi

  unset rm_me__r
  unset rm_me__target
  return 0
}

##
# Cancel jail destroy
cancel_destroy() {
  printf -- '\n\n  Destroy cancelled for %s\n\n' "${do_destroy__name}"
  exit 0
}

##
# Destroy a jail
# $1 command name
# $2 jail name
# $3 bin directory
# $4 jail directory
do_destroy() {
  do_destroy__cmd="$1"
  do_destroy__name="$2"
  do_destroy__bin="$3"
  do_destroy__jail="$4"

  # NOTE: If you, for whatever reason are doing something like this
  #
  # $ bww --forcename=program1 program2
  # $ bww --forcename=program2 program1
  #
  # Then the --destroy command will do the wrong thing for you.
  # When called as bww --destroy program1, it will remove the program1 binary from ${do_destroy__bin}
  # but will remove the ${do_destroy__jail} of program2. In this case, I am sure you know better than a script.
  # Alternatively, try to not alias names in this kind of roundabout way because its just kind of weird.

  # Interactive to prompt
  printf -- 'Really destroy %s (y/N)? ' "${do_destroy__name}"
  read -r do_destroy__confirm
  if [ "${do_destroy__confirm}" != "y" ] && [ "${do_destroy__confirm}" != "Y" ]; then
    # Bail out without confirmation
    unset do_destroy__confirm
    unset do_destroy__jail
    unset do_destroy__bin
    unset do_destroy__name
    unset do_destroy__cmd
    return 1
  fi

  printf -- 'Destroying %s in 3 seconds... Ctrl+C to cancel\n' "${do_destroy__name}"
  trap cancel_destroy INT TERM
  sleep 3s || cancel_destroy

  # Name is forced, do double
  if [ "${do_destroy__name}" != "${do_destroy__cmd}" ]; then
    rm_me "${do_destroy__bin}/${do_destroy__cmd}" || return 1
    rm_me "${do_destroy__jail}/${do_destroy__cmd}" 1 || return 1
    rm_me "${do_destroy__bin}/${do_destroy__name}" || return 1
    rm_me "${do_destroy__jail}/${do_destroy__name}" 1 || return 1
    printf -- '%s jail for %s was destroyed\n' "${APP_NAME}" "${do_destroy__cmd}"
    printf -- '%s jail for %s was destroyed\n' "${APP_NAME}" "${do_destroy__name}"
  else
    rm_me "${do_destroy__bin}/${do_destroy__cmd}" || return 1
    rm_me "${do_destroy__jail}/${do_destroy__cmd}" 1 || return 1
    printf -- '%s jail for %s was destroyed\n' "${APP_NAME}" "${do_destroy__cmd}"
  fi

  unset do_destroy__confirm
  unset do_destroy__jail
  unset do_destroy__bin
  unset do_destroy__name
  unset do_destroy__cmd
  return 0
}

main() {
  if ! command -v "${BWRAP}" >/dev/null 2>&1; then
    printf -- '%s is not installed.\n' "${BWRAP}"
    return 1
  fi

  # Destroying a jail has a special format
  # bww --destroy [--forcename=<name>] <jailname>

  # Loop and consume arguments until we can't anymore
  launch_shell=0
  destroy_jail=0
  private_jail=0
  force_jail_name=""
  pre_opts=""
  binds=""
  robinds=""
  devbinds=""
  run_opts=""
  while :; do
    case "$1" in
    --version)
      print_version || return 1
      return 0
      ;;
    --help)
      usage || return 1
      return 0
      ;;
    --help-all)
      usage 1 || return 1
      return 0
      ;;
    --nodie)
      __ignore_opts="${__ignore_opts} die"
      run_opts="${run_opts}
--nodie"
      printf -- 'INFO: Child process will not die with %s. Must be killed manually.\n' "${BWRAP}"
      shift
      ;;
    --private)
      private_jail=1
      run_opts="${run_opts}
--private"
      printf -- 'INFO: Private jail requested, HOME is bound to nothing.\n'
      shift
      ;;
    --nodev)
      __ignore_opts="${__ignore_opts} dev"
      run_opts="${run_opts}
--nodev"
      printf -- 'INFO: Not sandboxing /dev\n'
      shift
      ;;
    --notmp)
      __ignore_opts="${__ignore_opts} tmp"
      run_opts="${run_opts}
--notmp"
      printf -- 'INFO: Not sandboxing /tmp\n'
      shift
      ;;
    --noaudio)
      __ignore_opts="${__ignore_opts} audio"
      run_opts="${run_opts}
--noaudio"
      printf -- 'INFO: PulseAudio/PipeWire not allowed in jail\n'
      shift
      ;;
    --nouser)
      __ignore_opts="${__ignore_opts} user"
      run_opts="${run_opts}
--nouser"
      printf -- 'INFO: Not using user namespace\n'
      shift
      ;;
    --noipc)
      __ignore_opts="${__ignore_opts} ipc"
      run_opts="${run_opts}
--noipc"
      printf -- 'INFO: Not using IPC namespace\n'
      shift
      ;;
    --nopid)
      __ignore_opts="${__ignore_opts} pid"
      run_opts="${run_opts}
--nopid"
      printf -- 'INFO: Not using PID namespace\n'
      shift
      ;;
    --nouts)
      __ignore_opts="${__ignore_opts} uts"
      run_opts="${run_opts}
--nouts"
      printf -- 'INFO: Not using UTS namespace\n'
      shift
      ;;
    --nocgroup)
      __ignore_opts="${__ignore_opts} cgroup"
      run_opts="${run_opts}
--nocgroup"
      printf -- 'INFO: Not using CGROUP namespace\n'
      shift
      ;;
    --nosession)
      __ignore_opts="${__ignore_opts} session"
      run_opts="${run_opts}
--nosession"
      printf -- 'INFO: Not running in new session\n'
      shift
      ;;
    --nodrop)
      __ignore_opts="${__ignore_opts} drop"
      run_opts="${run_opts}
--nodrop"
      printf -- 'INFO: Not dropping capabilities\n'
      shift
      ;;
    --nox11)
      __ignore_opts="${__ignore_opts} x11"
      run_opts="${run_opts}
--nox11"
      printf -- 'INFO: X11 not allowed in jail\n'
      shift
      ;;
    --nodbus)
      __ignore_opts="${__ignore_opts} dbus"
      run_opts="${run_opts}
--nodbus"
      printf -- 'INFO: DBUS not allowed in jail\n'
      shift
      ;;
    --nogl)
      __ignore_opts="${__ignore_opts} gl"
      run_opts="${run_opts}
--nogl"
      printf -- 'INFO: GL|3d graphics not allowed in jail\n'
      shift
      ;;
    --nothemes)
      __ignore_opts="${__ignore_opts} themes"
      run_opts="${run_opts}
--nothemes"
      printf -- 'INFO: GTK/QT themes not allowed in jail\n'
      shift
      ;;
    --keyring)
      __ignore_opts="${__ignore_opts} nokeyring"
      run_opts="${run_opts}
--keyring"
      printf -- 'INFO: gnome-keyring allowed in jail\n'
      shift
      ;;
    --dconf)
      __ignore_opts="${__ignore_opts} nodconf"
      run_opts="${run_opts}
--dconf"
      printf -- 'INFO: dconf allowed in jail\n'
      shift
      ;;
    --gpg)
      __ignore_opts="${__ignore_opts} nogpg"
      run_opts="${run_opts}
--gpg"
      printf -- 'INFO: gnupg allowed in jail\n'
      shift
      ;;
    --p11)
      __ignore_opts="${__ignore_opts} nop11"
      run_opts="${run_opts}
--p11"
      printf -- 'INFO: p11-kit allowed in jail\n'
      shift
      ;;
    --gvfs)
      __ignore_opts="${__ignore_opts} nogvfs"
      run_opts="${run_opts}
--gvfs"
      printf -- 'INFO: GVFS allowed in jail\n'
      shift
      ;;
    --systemd)
      __ignore_opts="${__ignore_opts} nosystemd"
      run_opts="${run_opts}
--systemd"
      printf -- 'INFO: systemd allowed in jail\n'
      shift
      ;;
    --v4l)
      __ignore_opts="${__ignore_opts} nov4l"
      run_opts="${run_opts}
--v4l"
      printf -- 'INFO: v4l allowed in jail\n'
      shift
      ;;
    --bind-if-exists)
      # Eat argument
      shift
      # Add to list
      binds="$1 ${binds}"
      run_opts="${run_opts}
--bind-if-exists $1"
      shift
      ;;
    --bind-if-exists=*)
      split_arg="$(split_equal_get_arg "$1")"
      binds="${split_arg} ${binds}"
      run_opts="${run_opts}
--bind-if-exists=${split_arg}"
      unset split_arg
      shift
      ;;
    --robind-if-exists)
      # Eat argument
      shift
      # Add to list
      robinds="$1 ${robinds}"
      run_opts="${run_opts}
--robind-if-exists $1"
      shift
      ;;
    --robind-if-exists=*)
      split_arg="$(split_equal_get_arg "$1")"
      robinds="${split_arg} ${robinds}"
      run_opts="${run_opts}
--robind-if-exists=${split_arg}"
      unset split_arg
      shift
      ;;
    --devbind-if-exists)
      # Eat argument
      shift
      # Add to list
      devbinds="$1 ${devbinds}"
      run_opts="${run_opts}
--devbind-if-exists $1"
      shift
      ;;
    --devbind-if-exists=*)
      split_arg="$(split_equal_get_arg "$1")"
      devbinds="${split_arg} ${devbinds}"
      run_opts="${run_opts}
--devbind-if-exists=${split_arg}"
      unset split_arg
      shift
      ;;
    --forcename)
      # --forcename should have 1 argument, shift 1 more time
      shift
      force_jail_name="$1"
      run_opts="${run_opts}
--forcename $1"
      shift
      ;;
    --forcename=*)
      split_arg="$(split_equal_get_arg "$1")"
      force_jail_name="${split_arg}"
      run_opts="${run_opts}
--forcename=${split_arg}"
      unset split_arg
      shift
      ;;
    --destroy)
      # should have 1 arguments, shift 1 more times
      shift
      destroy_jail=1
      ;;
    --tmpfs)
      # should have 1 arguments, shift 1 more times
      pre_opts="${pre_opts} $1"
      run_opts="${run_opts}
--tmpfs $1"
      shift
      pre_opts="${pre_opts} $1"
      run_opts="${run_opts} $1"
      shift
      ;;
    --tmpfs=*)
      split_arg="$(split_equal_get_arg "$1")"
      pre_opts="${pre_opts} --tmpfs ${split_arg}"
      run_opts="${run_opts}
--tmpfs=${split_arg}"
      unset split_arg
      shift
      ;;
    --uid)
      # should have 1 arguments, shift 1 more times
      pre_opts="${pre_opts} $1"
      run_opts="${run_opts}
--uid $1"
      shift
      pre_opts="${pre_opts} $1"
      run_opts="${run_opts} $1"
      shift
      ;;
    --uid=*)
      split_arg="$(split_equal_get_arg "$1")"
      pre_opts="${pre_opts} --uid ${split_arg}"
      run_opts="${run_opts}
--uid=${split_arg}"
      unset split_arg
      shift
      ;;
    --gid)
      # should have 1 arguments, shift 1 more times
      pre_opts="${pre_opts} $1"
      run_opts="${run_opts}
--gid $1"
      shift
      pre_opts="${pre_opts} $1"
      run_opts="${run_opts} $1"
      shift
      ;;
    --gid=*)
      split_arg="$(split_equal_get_arg "$1")"
      pre_opts="${pre_opts} --gid ${split_arg}"
      run_opts="${run_opts}
--gid=${split_arg}"
      unset split_arg
      shift
      ;;
    --setenv | --bind | --ro-bind)
      # should have 2 arguments, shift 2 more times
      pre_opts="${pre_opts} $1"
      run_opts="${run_opts}
$1"
      shift
      pre_opts="${pre_opts} $1"
      run_opts="${run_opts} $1"
      shift
      pre_opts="${pre_opts} $1"
      run_opts="${run_opts} $1"
      shift
      ;;
    --shell)
      launch_shell=1
      run_opts="${run_opts}
--shell"
      shift
      ;;
    --*)
      pre_opts="${pre_opts} $1"
      run_opts="${run_opts}
$1"
      shift
      ;;
    *)
      break
      ;;
    esac
  done

  # Shorten the command to just the basename
  if [ "$(basename "$0")" = "${APP_NAME}" ]; then
    if [ -z "$1" ]; then
      usage || return 1
      return 1
    fi
    bw_command="$1"
    short_command="$(basename "$1")"
  else
    short_command="$(basename "$0")"
    bw_command="${short_command}"
  fi
  # eat argument
  shift

  jail_name=""
  if [ -n "${force_jail_name}" ]; then
    jail_name="${force_jail_name}"
  else
    jail_name="${short_command}"
  fi

  basejaildir="${HOME}/.${APP_NAME}"
  bindir="${basejaildir}/bin"
  jaildir="${basejaildir}/jails"

  # Destroy first if requested
  if [ "${destroy_jail}" -ne 0 ]; then
    do_destroy "${bw_command}" "${jail_name}" "${bindir}" "${jaildir}" || return 1
    return 0
  fi

  # Put the $HOME for this program into a jailed directory.
  # To clean up the program and all traces of user configuration, just rm the jail or use --destroy
  jail="${jaildir}/${jail_name}"

  # Dont make the jail if its private
  if [ "${private_jail}" -eq 0 ]; then
    make_jail "${jail}" "${bw_command}" || return 1
  fi

  # bwrap time ----

  # Always do this first, order matters
  # If we are marked as do-not-die, then don't add die-with-parent
  if has_option "die"; then
    __bw_opts="${__bw_opts}
  --die-with-parent"
  fi

  # Create a new session unless we are launching a shell
  if has_option "session" && [ "${launch_shell}" -eq 0 ]; then
    __bw_opts="${__bw_opts}
  --new-session"
  fi

  # Handle namespaces before mounting other parts of the file system
  if has_option "user"; then
    __bw_opts="${__bw_opts}
  --unshare-user-try"
  fi

  if has_option "ipc"; then
    __bw_opts="${__bw_opts}
  --unshare-ipc"
  fi

  if has_option "pid"; then
    __bw_opts="${__bw_opts}
  --unshare-pid"
  fi

  if has_option "uts"; then
    __bw_opts="${__bw_opts}
  --unshare-uts"
  fi

  if has_option "cgroup"; then
    __bw_opts="${__bw_opts}
  --unshare-cgroup-try"
  fi

  if has_option "drop"; then
    __bw_opts="${__bw_opts}
  --cap-drop ALL"
  fi

  # If the user wants access to devices, we can't make read only
  if has_option "dev"; then
    __bw_opts="${__bw_opts}
  --ro-bind / /"

    # If we fake dev, mount fake dev stuff
    __bw_opts="${__bw_opts}
  --dev /dev"

    # If we are not sharing IPC, then we cannot mount a new mqueue
    if has_option "ipc"; then
      __bw_opts="${__bw_opts}
  --mqueue /dev/mqueue"
    fi
  else
    __bw_opts="${__bw_opts}
  --dev-bind / /"
  fi

  # robind sys
  __bw_opts="${__bw_opts}
  --ro-bind /sys /sys"

  # Basically always meant to block /proc
  __bw_opts="${__bw_opts}
  --proc /proc"

  # Blacklist first
  block_in_jail "/boot"

  # Blacklist any mass storage directories by default
  block_in_jail "/storage"

  # Preset read only binds
  robind_if_exists "/usr"
  robind_if_exists "/etc"

  # Bind var
  robind_if_exists "/var"
  if [ "${private_jail}" -eq 0 ]; then
    __bw_opts="${__bw_opts}
  --bind ${jail}/var/tmp /var/tmp"
  fi

  block_in_jail "/usr/lib/modules-load.d"
  block_in_jail "/usr/lib/modprobe.d"
  block_in_jail "/usr/lib/sysctl.d"
  block_in_jail "/etc/modules-load.d"
  block_in_jail "/etc/modprobe.d"
  block_in_jail "/etc/sysctl.d"

  # Not on every system (Debian for example)
  block_in_jail "/usr/lib/modules"
  block_in_jail "/usr/lib/modprobe.d"

  # Block /tmp access unless ignored
  if has_option "tmp"; then
    block_in_jail "/tmp"
  fi

  # Restrict other homes
  block_in_jail "/home"

  if [ "${private_jail}" -eq 0 ]; then
    # Bind the jail directory to HOME
    __bw_opts="${__bw_opts}
  --bind ${jail}/home ${HOME}"
  else
    # Bind the jail to a tmpfs
    __bw_opts="${__bw_opts}
  --tmpfs ${HOME}"
  fi

  # Block the /run directory
  block_in_jail "/run"
  block_in_jail "/run/lock"
  block_in_jail "${XDG_RUNTIME_DIR}"

  # Flatpak binding
  bind_if_exists "${XDG_RUNTIME_DIR}/.flatpak"
  bind_if_exists "${XDG_RUNTIME_DIR}/.flatpak-helper"

  # Any program which relies on systemd
  if ! has_option "nosystemd"; then
    robind_if_exists "${XDG_CONFIG_HOME}/systemd"

    # Bind systemd socket
    robind_if_exists "/run/systemd"

    bind_if_exists "${XDG_RUNTIME_DIR}/systemd"

    robind_if_exists "/usr/lib/systemd"
    robind_if_exists "/etc/systemd"
  else
    block_in_jail "/run/systemd"

    # Block systemd configuration directories
    block_in_jail "/usr/lib/systemd"
    block_in_jail "/etc/systemd"

    # For systemd-homed
    robind_if_exists "/run/systemd/userdb"

    # For systemd-resolved
    robind_if_exists "/run/systemd/resolve"
  fi

  # For PulseAudio
  if has_option "audio"; then
    robind_if_exists "${XDG_CONFIG_HOME}/pulse"
    robind_if_exists "${XDG_CONFIG_HOME}/pipewire-media-session"
    robind_if_exists "${XDG_CONFIG_HOME}/pipewire"

    robind_if_exists /run/lock/asound*
    bind_if_exists "${XDG_RUNTIME_DIR}/"pulse*
    bind_if_exists "${XDG_RUNTIME_DIR}/"pipewire*

    devbind_if_exists "/dev/snd"
  else
    block_in_jail "/dev/snd"
  fi

  # Bind X11 socket
  if has_option "x11"; then
    if has_option "tmp"; then
      robind_if_exists "/tmp/.X11-unix/"
    fi

    robind_if_exists "/etc/X11"
    robind_if_exists "/usr/share/X11"

    # Authorize clients to connect to Xserver
    robind_if_exists "${HOME}/.Xauthority"
  else
    block_in_jail "/etc/X11"
    block_in_jail "/usr/share/X11"
    block_in_jail "/tmp/.X11-unix/"
  fi

  # If we have a dbus entry in the user run dir
  if has_option "dbus"; then
    robind_if_exists "${HOME}/.dbus"

    robind_if_exists "/run/dbus"
    bind_if_exists "${XDG_RUNTIME_DIR}/bus"
    bind_if_exists "${XDG_RUNTIME_DIR}/"dbus*
    bind_if_exists "${XDG_RUNTIME_DIR}/.dbus-proxy"
  fi

  # Any program which relies on dconf
  if ! has_option "nodconf"; then
    robind_if_exists "${XDG_CONFIG_HOME}/dconf"
    bind_if_exists "${XDG_RUNTIME_DIR}/dconf"
  fi

  # Any program which relies on gnome-keyring
  if ! has_option "nokeyring"; then
    robind_if_exists "${XDG_DATA_HOME}/keyrings"
    bind_if_exists "${XDG_RUNTIME_DIR}/keyring"
  fi

  # Any program which relies on gnupg
  if ! has_option "nogpg"; then
    robind_if_exists "${HOME}/.gnupg"
    bind_if_exists "${XDG_RUNTIME_DIR}/gnupg"

    # Custom location
    if [ -n "${GNUPGHOME}" ]; then
      robind_if_exists "${GNUPGHOME}"
    fi
  fi

  # Any program which relies on polkit and p11-kit
  if ! has_option "nop11"; then
    # No user polkit files that I know of
    bind_if_exists "${XDG_RUNTIME_DIR}/p11-kit"
  else
    block_in_jail "/etc/pkcs11"
    block_in_jail "/etc/polkit-1"
    block_in_jail "/usr/share/polkit-1"
    block_in_jail "/usr/lib/polkit-1"
  fi

  # Any program which relies on GVFS
  if ! has_option "nogvfs"; then
    robind_if_exists "${HOME}/.gvfs"
    robind_if_exists "${XDG_DATA_HOME}/gvfs-metadata"

    robind_if_exists "/usr/lib/gvfs"
    robind_if_exists "/usr/share/gvfs"
    bind_if_exists "${XDG_RUNTIME_DIR}/gvfs"
  else
    block_in_jail "/usr/lib/gvfs"
    block_in_jail "/usr/share/gvfs"
  fi

  # Any program which relies on v4l
  if ! has_option "nov4l"; then
    # Bind v4l devices if we are not using real dev
    if has_option "dev"; then
      devbind_if_exists "/dev/v4l"
      devbind_if_exists /dev/video*
    fi
  else
    block_in_jail "/dev/v4l"
    block_in_jail /dev/video*
  fi

  # Any theme related dirs
  if has_option "themes"; then
    # XDG
    robind_if_exists "${XDG_CONFIG_HOME}/"user-dirs*
    if [ -n "${XDG_CONFIG_DIRS}" ]; then
      __bw_opts="${__bw_opts}
  --setenv XDG_CONFIG_DIRS ${XDG_CONFIG_DIRS}"
    fi
    if [ -n "${XDG_DATA_DIRS}" ]; then
      __bw_opts="${__bw_opts}
  --setenv XDG_DATA_DIRS ${XDG_DATA_DIRS}"
    fi

    # Fonts
    robind_if_exists "${HOME}/.fonts"
    robind_if_exists "${HOME}/.fonts.conf"
    robind_if_exists "${XDG_CONFIG_HOME}/fontconfig"

    # QT/KDE
    robind_if_exists "${XDG_CONFIG_HOME}/Trolltech.conf"
    robind_if_exists "${XDG_CONFIG_HOME}/Kvantum"
    robind_if_exists "${XDG_CONFIG_HOME}/"qt*ct
    robind_if_exists "${XDG_CONFIG_HOME}/kdeglobals"
    if [ -n "${QT_QPA_PLATFORMTHEME}" ]; then
      __bw_opts="${__bw_opts}
  --setenv QT_QPA_PLATFORMTHEME ${QT_QPA_PLATFORMTHEME}"
    fi
    if [ -n "${QT_STYLE_OVERRIDE}" ]; then
      __bw_opts="${__bw_opts}
  --setenv QT_STYLE_OVERRIDE ${QT_STYLE_OVERRIDE}"
    fi

    # GTK/Gnome
    robind_if_exists "${XDG_CONFIG_HOME}/gtkrc"
    robind_if_exists "${XDG_CONFIG_HOME}/gtkrc"-*
    robind_if_exists "${XDG_CONFIG_HOME}/"gtk-*
    robind_if_exists "${HOME}/".gtkrc*
    robind_if_exists "/etc/"gtk*
  else
    block_in_jail "/etc/"gtk*
  fi

  # Bind the mesa caches so they are not re-created for each jail
  if has_option "gl"; then
    if has_option "dev"; then
      devbind_if_exists "/dev/dri"
    fi

    # Create a shared shader-cache directory
    mkdir -p "${XDG_CACHE_HOME}/mesa_shader_cache" || {
      printf -- 'Failed prepping mesa_shader_cache cache directory\n'
      return 1
    }
    bind_if_exists "${XDG_CACHE_HOME}/mesa_shader_cache"

    robind_if_exists "${HOME}/.drirc"
    robind_if_exists "/usr/share/drirc.d"
    robind_if_exists "/usr/lib/dri"
  else
    block_in_jail "/dev/dri"
    block_in_jail "/usr/share/drirc.d"
    block_in_jail "/usr/lib/dri"
  fi

  # Extra binds
  for binding in ${binds}; do
    bind_if_exists "${binding}"
  done
  for robinding in ${robinds}; do
    robind_if_exists "${robinding}"
  done
  for devbinding in ${devbinds}; do
    devbind_if_exists "${devbinding}"
  done
  unset binds
  unset robinds
  unset devbinds

  if [ -n "${run_opts}" ]; then
    printf -- '\n%s with options: %s\n\n' "${APP_NAME}" "${run_opts}"
  fi

  if [ "${launch_shell}" -eq 0 ]; then
    # Launch the program
    printf -- 'Run %s: %s\n%s \n%s %s\n' "${BWRAP}" "${__bw_opts}" "${pre_opts}" "${bw_command}" "$*"

    # shellcheck disable=SC2086
    exec "${BWRAP}" ${__bw_opts} ${pre_opts} "${bw_command}" "$@" || return 1
  else
    # Launch bash into the program's jail
    printf -- 'Run %s: %s\n%s /usr/bin/env bash\n' "${BWRAP}" "${__bw_opts}" "${pre_opts}"

    # shellcheck disable=SC2086
    exec "${BWRAP}" ${__bw_opts} ${pre_opts} /usr/bin/env bash || return 1
  fi

  unset __bw_opts
  unset run_opts
  unset pre_opts
  unset bw_command
  return 0
}

__bw_opts=""

# Kernel does not support user namespaces yet
# X11 requires IPC sharing
__ignore_opts="ipc"

# bww
# by: pyamsoft <developer(dot)pyamsoft(at)gmail(dot)com>
main "$@" || exit 1
exit 0
