#!/bin/sh
#
# The GPLv2 License
#
#   Copyright (C) 2019  Peter Kenji Yamanaka
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License along
#   with this program; if not, write to the Free Software Foundation, Inc.,
#   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# bwrapper - autogenerate bww scripts

__PROGRAM_NAME="$(basename "$0")"

print_usage()
{
  printf -- '%s\n\n' "$(cat << EOF
usage: ${__PROGRAM_NAME} <program> [argument-string]

  argument-string can be any normal command line arguments you
  pass if you were calling bww from the command line.
  The first occurrence of %s will be replaced by the "%cmd"
  program name.

EOF
)"
  bww --help || return 1
  return 0
}

main()
{
  command_name="$1"
  shift

  if [ -z "${command_name}" ]; then
    printf -- 'Must specify a command\n\n'
    print_usage || return 1
    return 1
  fi

  if [ "${command_name}" = "--help" ]; then
    print_usage || return 1
    return 0
  fi

  # Loop and consume arguments until we can't anymore

  if ! command -v "${command_name}" > /dev/null 2>&1; then
    printf -- 'Invalid command: %s\n\n' "${command_name}"
    print_usage || return 1
    return 1
  fi

  if [ -n "$*" ]; then
    found_command=0
    for cmd in "$@"; do
      if [ "${cmd}" = "%cmd" ]; then
        found_command=1
        break
      fi
    done

    if [ "${found_command}" -eq 0 ]; then
      printf -- 'Must specify command somewhere in the arguments\n\n'
      print_usage || return 1
      return 1
    fi
  else
    set -- "${command_name}"
  fi

  target_dir="${HOME}/bin"
  if [ ! -d "${target_dir}" ]; then
    printf -- '%s expects the directory: %s to exist on the PATH\n' \
      "${__PROGRAM_NAME}" "${target_dir}"
    return 1
  fi

  target_file="${target_dir}/${command_name}"
  if [ -f "${target_file}" ]; then
    printf -- 'Remove old file at %s...\n' "${target_file}"
    rm -f "${target_file}" || return 1
  fi

  printf -- 'Output to %s...\n' "${target_file}"
  cat > "${target_file}" << EOF
#!/bin/sh

# This file is autogenerated by ${__PROGRAM_NAME}, modifications may be
# overwritten by the script.

# This script expects the 'bww' script to be available to the user somewhere
# on the \$PATH. It will fail if the situation proves otherwise.

exec bww $@ "\$@"
EOF

  sed -i "s/%cmd/${command_name}/" "${target_file}"

  printf -- 'Mark %s as executable...\n' "${target_file}"
  chmod 700 "${target_file}" || return 1

  printf -- 'Generated: '%s'.\n' "${target_file}"
  return 0
}

main "$@" || exit 1
exit 0
